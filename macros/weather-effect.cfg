
#open ##Utilities
	
	#define Declare_Global_LUA_Functions
		##Declare spell globals
		##{Ease_Burden_Declare}
		
		[lua] ##a bunch of global utility functions
			code=<<		
				function ToA_Weather(Input_Table)

					--Example of valid call: ToA_Weather({Weather_Str="data/add-ons/Town_of_Arnsreach_Resources_1/images/weather/snowfall/00[01~33].png:", Center_X=85, Center_Y=84, Area_Radius=40, Min_Ms_Per_Frame=27, Max_Ms_Per_Frame=33, Intensity=0.8, Remove=false})

					--ToA_Weather({Weather_Str="data/add-ons/Town_of_Arnsreach_Resources_1/images/weather/wind/NE_1/00[01~30].png:", Center_X=85, Center_Y=84, Area_Radius=40, Min_Ms_Per_Frame=27, Max_Ms_Per_Frame=33, Intensity=0.1, Remove=false, Stationary_Str="data/add-ons/Town_of_Arnsreach_Resources_1/images/weather/wind/NE_1/0031.png:", Stationary_Duration_Multiplier=1000})

					--See Wesnoth ImagePathFunctions for more info

					--Iterate through each tile in area.
					local Next_Tile={}
					local Ms_Per_Frame=0
					for Range=0,Input_Table.Area_Radius do
						for Range_Step=1,Range*6 do
							if Range==0 then
								Next_Tile={Input_Table.Center_X, Input_Table.Center_Y}
							elseif Range_Step==1 then
								Next_Tile=wesnoth.map.get_direction({Input_Table.Center_X,Input_Table.Center_Y}, "n", Range)
								Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "se", 1)
							elseif Range_Step<=Range then
								Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "se", 1)
							elseif Range_Step<=Range*2 then
								Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "s", 1)
							elseif Range_Step<=Range*3 then
								Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "sw", 1)
							elseif Range_Step<=Range*4 then
								Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "nw", 1)
							elseif Range_Step<=Range*5 then
								Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "n", 1)
							elseif Range_Step<=Range*6 then
								Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "ne", 1)
							end

-- for Level=0,Input_Table.Area_Radius*2 do
-- for Level_Step=1,Level*2 do
-- if Level==0 then
-- Next_Tile=wesnoth.map.get_direction({Input_Table.Center_X,Input_Table.Center_Y}, "n", Input_Table.Area_Radius)
-- elseif Level_Step==1 then
-- Next_Tile=wesnoth.map.get_direction({Input_Table.Center_X,Input_Table.Center_Y}, "n", Input_Table.Area_Radius)
-- Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "sw", math.min(Level,Input_Table.Area_Radius))
-- if Level>Input_Table.Area_Radius then
-- Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "s", (Level-Input_Table.Area_Radius))
-- end
-- elseif Level_Step<Level then
-- Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "se", 1)
-- elseif Level_Step>=Level and Level>Input_Table.Area_Radius then
-- Next_Tile=wesnoth.map.get_direction({Next_Tile[1],Next_Tile[2]}, "s", 1)
-- elseif Level_Step<=Level*3 then

-- end

							--Place or remove an animation at the tile.
							if Input_Table.Remove then

								--Since randomness is involved in placing the animation we will need to iterate trough every possbible instance to remove.
								for Frame_Ms=Input_Table.Min_Ms_Per_Frame,Input_Table.Max_Ms_Per_Frame do
									if Input_Table.Stationary_Str then
										wesnoth.interface.remove_hex_overlay(Next_Tile[1], Next_Tile[2], Input_Table.Stationary_Str..tostring(Frame_Ms*Input_Table.Stationary_Duration_Multiplier)..","..Input_Table.Weather_Str..tostring(Frame_Ms))
									else
										wesnoth.interface.remove_hex_overlay(Next_Tile[1], Next_Tile[2], Input_Table.Weather_Str..tostring(Frame_Ms))
									end
								end


								--Randomness is used in the placement of animations to get away from any synchronized/uniformed weather effects that would look unnatural.
								elseif math.random()<Input_Table.Intensity then
									Ms_Per_Frame=math.random(Input_Table.Min_Ms_Per_Frame, Input_Table.Max_Ms_Per_Frame)
									if Input_Table.Stationary_Str then
										wesnoth.interface.add_hex_overlay(Next_Tile[1], Next_Tile[2], {halo=Input_Table.Stationary_Str..tostring(Ms_Per_Frame*Input_Table.Stationary_Duration_Multiplier)..","..Input_Table.Weather_Str..tostring(Ms_Per_Frame)})
									else
										wesnoth.interface.add_hex_overlay(Next_Tile[1], Next_Tile[2], {halo=Input_Table.Weather_Str..tostring(Ms_Per_Frame)})
									end
								end
							end
						end
					end
				
			>>
		[/lua]
	#enddef
	
#close

#define THUNDER_LIGHTNING

    [color_adjust]
        red=100
        green=100
        blue=100
    [/color_adjust]

    [delay]
        time=10
    [/delay]

    [color_adjust]
        red=0
        green=0
        blue=0
    [/color_adjust]
    [delay]
        time=10
    [/delay]

    [sound]
        name=thunder1.wav,thunder2.wav,thunder3.wav
    [/sound]
#enddef

#define THUNDER_46_TURNS
    [event]
        name=turn 2
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 3
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 5

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 6

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 9
        [sound]
            name=thunder2.wav
        [/sound]
        [delay]
            time=400
        [/delay]
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 12
        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 16

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 17
        [sound]
            name=thunder2.wav
        [/sound]
        [delay]
            time=400
        [/delay]
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 19

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 20
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 29
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 34

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 37

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 39
        [sound]
            name=thunder2.wav
        [/sound]
        [delay]
            time=400
        [/delay]
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 41

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 43

        {THUNDER_LIGHTNING}
    [/event]

    [event]
        name=turn 45
        [sound]
            name=thunder2.wav
        [/sound]
        [delay]
            time=400
        [/delay]
        [sound]
            name=thunder2.wav
        [/sound]
    [/event]

    [event]
        name=turn 46

        {THUNDER_LIGHTNING}
    [/event]
 
#enddef